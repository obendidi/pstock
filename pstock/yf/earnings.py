import typing as tp

import httpx

from pstock.earnings import Earnings

from .quote import get_yf_quote_summary_content_async, get_yf_quote_summary_content_sync


def get_earnings_sync(
    symbol: str, client: tp.Optional[httpx.Client] = None
) -> Earnings:
    """Get [Earnings][pstock.schemas.Earnings] data from yahoo-finance.

    [Earnings][pstock.schemas.Earnings] are parsed from the `quote_summary` generated by
    [get_quote_summary][pstock.yahoo_finance.get_quote_summary].

    Is provided symbol has no earnings (crypto/ETF) and empty
    [Earnings][pstock.schemas.Earnings] is returned.

    Args:
        symbol (str): A stock symbol availlable in yahoo-finance
        client (tp.Optional[httpx.Client], optional): Defaults to None.

    Returns:
        [pstock.schemas.Earnings][]
    """
    content = get_yf_quote_summary_content_sync(symbol, client=client)
    return Earnings.from_yf(content=content)


async def get_earnings_async(
    symbol: str, client: tp.Optional[httpx.AsyncClient] = None
) -> Earnings:
    """Get [Earnings][pstock.schemas.Earnings] data from yahoo-finance.

    [Earnings][pstock.schemas.Earnings] are parsed from the `quote_summary` generated by
    [get_quote_summary][pstock.yahoo_finance.get_quote_summary].

    Is provided symbol has no earnings (crypto/ETF) and empty
    [Earnings][pstock.schemas.Earnings] is returned.

    Args:
        symbol (str): A stock symbol availlable in yahoo-finance
        client (tp.Optional[httpx.AsyncClient], optional): Defaults to None.

    Returns:
        [pstock.schemas.Earnings][]
    """
    content = await get_yf_quote_summary_content_async(symbol, client=client)
    return Earnings.from_yf(content=content)
