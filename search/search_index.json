{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pstock Welcome to pstock documentation. This is still a work-in-progess, any help, recommendation or ideas are welcome. This packages is for personal use only. Disclosure Nothing in this project should be considered investment advice. Past performance is not necessarily indicative of future returns.","title":"Introduction"},{"location":"#pstock","text":"Welcome to pstock documentation. This is still a work-in-progess, any help, recommendation or ideas are welcome. This packages is for personal use only.","title":"Pstock"},{"location":"#disclosure","text":"Nothing in this project should be considered investment advice. Past performance is not necessarily indicative of future returns.","title":"Disclosure"},{"location":"isin-reference/","text":"ISIN pstock.isin pstock . isin . get_isin ( symbol , client = None ) async Get ISIN of an US stock symbol from https://markets.businessinsider.com . If the isin is not found, returns None. By default yahoo-finance sumbols that contain '^' or '-' are not supported. Parameters: Name Type Description Default symbol str symbol or ticker of an existing US market stock required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description tp.Optional[str] isin of the stock if found else None","title":"Isin"},{"location":"isin-reference/#isin","text":"","title":"ISIN"},{"location":"isin-reference/#pstock.isin","text":"","title":"isin"},{"location":"isin-reference/#pstock.isin.get_isin","text":"Get ISIN of an US stock symbol from https://markets.businessinsider.com . If the isin is not found, returns None. By default yahoo-finance sumbols that contain '^' or '-' are not supported. Parameters: Name Type Description Default symbol str symbol or ticker of an existing US market stock required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description tp.Optional[str] isin of the stock if found else None","title":"get_isin()"},{"location":"schemas-reference/","text":"Schemas pstock.schemas special pstock.schemas.asset Asset ( BaseModel ) pydantic-model symbol : str pydantic-field required name : str pydantic-field required type : Literal [ 'EQUITY' , 'ETF' , 'CRYPTOCURRENCY' ] pydantic-field required trends : Trends pydantic-field required earnings : Earnings pydantic-field required next_earnings_date : datetime pydantic-field market : str pydantic-field sector : str pydantic-field industry : str pydantic-field country : str pydantic-field isin : str pydantic-field pstock.schemas.bar Bar ( BaseModel ) pydantic-model datetime : datetime pydantic-field required open : float pydantic-field required high : float pydantic-field required low : float pydantic-field required close : float pydantic-field required adj_close : float pydantic-field required volume : float pydantic-field required interval : timedelta pydantic-field required Bars ( BaseDataFrameModel ) pydantic-model __root__ : List [ pstock . schemas . bar . Bar ] pydantic-field required special df : DataFrame property readonly Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame BarsMulti ( BaseDataFrameModel ) pydantic-model __root__ : Dict [ str , pstock . schemas . bar . Bars ] pydantic-field required special df : DataFrame inherited property readonly Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame pstock.schemas.base ComputedType BaseDataFrameModel ( BaseModel ) pydantic-model A custom pydantic.BaseModel with support for convertion to a pandas.DataFrame Examples: With a list of pydantic.BaseModels: import typing from pydantic import BaseModel from pstock.schemas import BaseDataFrameModel class MyModel ( BaseModel ): x : int y : int class MyDfModel ( BaseDataFrameModel ): __root__ : typing . List [ MyModel ] model = MyDfModel . parse_obj ([{ \"x\" : 0 , \"y\" : 0 }, { \"x\" : 1 , \"y\" : 1 }]) print ( model ) # MyDfModel(__root__=[MyModel(x=0, y=0), MyModel(x=1, y=1)]) print ( model . df ) # x y # 0 0 0 # 1 1 1 With a mapping of BaseDataFrameModels : import typing from pydantic import BaseModel from pstock.schemas import BaseDataFrameModel class MyModel ( BaseModel ): x : int y : int class MyDfModel ( BaseDataFrameModel ): __root__ : typing . List [ MyModel ] class MyMappingDfModel ( BaseDataFrameModel ): __root__ : typing . Dict [ str , MyDfModel ] model = MyMappingDfModel . parse_obj ({ \"key1\" : [{ \"x\" : 0 , \"y\" : 0 }, { \"x\" : 1 , \"y\" : 1 }], \"key2\" : [{ \"x\" : 2 , \"y\" : 2 }, { \"x\" : 3 , \"y\" : 3 }]}) print ( model ) # MyMappingDfModel(__root__={'key1': MyDfModel(__root__=[MyModel(x=0, y=0), MyModel(x=1, y=1)]), 'key2': MyDfModel(__root__=[MyModel(x=2, y=2), MyModel(x=3, y=3)])}) # noqa print ( model . df ) # key1 key2 # x y x y # 0 0 0 2 2 # 1 1 1 3 3 __root__ : Union [ Sequence [ pydantic . main . BaseModel ], Mapping [ str , BaseDataFrameModel ]] pydantic-field required special df : DataFrame property readonly Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame Computed ( Generic ) validate_always validate ( func , field , values ) classmethod pstock.schemas.earnings Earning ( BaseModel ) pydantic-model quarter : str pydantic-field required estimate : float pydantic-field required actual : float pydantic-field required revenue : float pydantic-field required earnings : float pydantic-field required Earnings ( BaseDataFrameModel ) pydantic-model __root__ : List [ pstock . schemas . earnings . Earning ] pydantic-field required special df : DataFrame property readonly Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame pstock.schemas.trend Trend ( BaseModel ) pydantic-model date : date pydantic-field required strong_buy : int pydantic-field buy : int pydantic-field hold : int pydantic-field sell : int pydantic-field strong_sell : int pydantic-field score : pstock . schemas . base . Computed [ float ] pydantic-field recomendation : pstock . schemas . base . Computed [ Literal [ 'UNKNOWN' , 'STRONG_BUY' , 'BUY' , 'HOLD' , 'SELL' , 'STRONG_SELL' ]] pydantic-field Trends ( BaseDataFrameModel ) pydantic-model __root__ : List [ pstock . schemas . trend . Trend ] pydantic-field required special df : DataFrame property readonly Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame","title":"Schemas"},{"location":"schemas-reference/#schemas","text":"","title":"Schemas"},{"location":"schemas-reference/#pstock.schemas","text":"","title":"schemas"},{"location":"schemas-reference/#pstock.schemas.asset","text":"","title":"asset"},{"location":"schemas-reference/#pstock.schemas.asset.Asset","text":"","title":"Asset"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.symbol","text":"","title":"symbol"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.name","text":"","title":"name"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.type","text":"","title":"type"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.trends","text":"","title":"trends"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.earnings","text":"","title":"earnings"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.next_earnings_date","text":"","title":"next_earnings_date"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.market","text":"","title":"market"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.sector","text":"","title":"sector"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.industry","text":"","title":"industry"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.country","text":"","title":"country"},{"location":"schemas-reference/#pstock.schemas.asset.Asset.isin","text":"","title":"isin"},{"location":"schemas-reference/#pstock.schemas.bar","text":"","title":"bar"},{"location":"schemas-reference/#pstock.schemas.bar.Bar","text":"","title":"Bar"},{"location":"schemas-reference/#pstock.schemas.bar.Bar.datetime","text":"","title":"datetime"},{"location":"schemas-reference/#pstock.schemas.bar.Bar.open","text":"","title":"open"},{"location":"schemas-reference/#pstock.schemas.bar.Bar.high","text":"","title":"high"},{"location":"schemas-reference/#pstock.schemas.bar.Bar.low","text":"","title":"low"},{"location":"schemas-reference/#pstock.schemas.bar.Bar.close","text":"","title":"close"},{"location":"schemas-reference/#pstock.schemas.bar.Bar.adj_close","text":"","title":"adj_close"},{"location":"schemas-reference/#pstock.schemas.bar.Bar.volume","text":"","title":"volume"},{"location":"schemas-reference/#pstock.schemas.bar.Bar.interval","text":"","title":"interval"},{"location":"schemas-reference/#pstock.schemas.bar.Bars","text":"","title":"Bars"},{"location":"schemas-reference/#pstock.schemas.bar.Bars.__root__","text":"","title":"__root__"},{"location":"schemas-reference/#pstock.schemas.bar.Bars.df","text":"Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame","title":"df"},{"location":"schemas-reference/#pstock.schemas.bar.BarsMulti","text":"","title":"BarsMulti"},{"location":"schemas-reference/#pstock.schemas.bar.BarsMulti.__root__","text":"","title":"__root__"},{"location":"schemas-reference/#pstock.schemas.bar.BarsMulti.df","text":"Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame","title":"df"},{"location":"schemas-reference/#pstock.schemas.base","text":"","title":"base"},{"location":"schemas-reference/#pstock.schemas.base.ComputedType","text":"","title":"ComputedType"},{"location":"schemas-reference/#pstock.schemas.base.BaseDataFrameModel","text":"A custom pydantic.BaseModel with support for convertion to a pandas.DataFrame Examples: With a list of pydantic.BaseModels: import typing from pydantic import BaseModel from pstock.schemas import BaseDataFrameModel class MyModel ( BaseModel ): x : int y : int class MyDfModel ( BaseDataFrameModel ): __root__ : typing . List [ MyModel ] model = MyDfModel . parse_obj ([{ \"x\" : 0 , \"y\" : 0 }, { \"x\" : 1 , \"y\" : 1 }]) print ( model ) # MyDfModel(__root__=[MyModel(x=0, y=0), MyModel(x=1, y=1)]) print ( model . df ) # x y # 0 0 0 # 1 1 1 With a mapping of BaseDataFrameModels : import typing from pydantic import BaseModel from pstock.schemas import BaseDataFrameModel class MyModel ( BaseModel ): x : int y : int class MyDfModel ( BaseDataFrameModel ): __root__ : typing . List [ MyModel ] class MyMappingDfModel ( BaseDataFrameModel ): __root__ : typing . Dict [ str , MyDfModel ] model = MyMappingDfModel . parse_obj ({ \"key1\" : [{ \"x\" : 0 , \"y\" : 0 }, { \"x\" : 1 , \"y\" : 1 }], \"key2\" : [{ \"x\" : 2 , \"y\" : 2 }, { \"x\" : 3 , \"y\" : 3 }]}) print ( model ) # MyMappingDfModel(__root__={'key1': MyDfModel(__root__=[MyModel(x=0, y=0), MyModel(x=1, y=1)]), 'key2': MyDfModel(__root__=[MyModel(x=2, y=2), MyModel(x=3, y=3)])}) # noqa print ( model . df ) # key1 key2 # x y x y # 0 0 0 2 2 # 1 1 1 3 3","title":"BaseDataFrameModel"},{"location":"schemas-reference/#pstock.schemas.base.BaseDataFrameModel.__root__","text":"","title":"__root__"},{"location":"schemas-reference/#pstock.schemas.base.BaseDataFrameModel.df","text":"Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame","title":"df"},{"location":"schemas-reference/#pstock.schemas.base.Computed","text":"","title":"Computed"},{"location":"schemas-reference/#pstock.schemas.base.Computed.validate_always","text":"","title":"validate_always"},{"location":"schemas-reference/#pstock.schemas.base.Computed.validate","text":"","title":"validate()"},{"location":"schemas-reference/#pstock.schemas.earnings","text":"","title":"earnings"},{"location":"schemas-reference/#pstock.schemas.earnings.Earning","text":"","title":"Earning"},{"location":"schemas-reference/#pstock.schemas.earnings.Earning.quarter","text":"","title":"quarter"},{"location":"schemas-reference/#pstock.schemas.earnings.Earning.estimate","text":"","title":"estimate"},{"location":"schemas-reference/#pstock.schemas.earnings.Earning.actual","text":"","title":"actual"},{"location":"schemas-reference/#pstock.schemas.earnings.Earning.revenue","text":"","title":"revenue"},{"location":"schemas-reference/#pstock.schemas.earnings.Earning.earnings","text":"","title":"earnings"},{"location":"schemas-reference/#pstock.schemas.earnings.Earnings","text":"","title":"Earnings"},{"location":"schemas-reference/#pstock.schemas.earnings.Earnings.__root__","text":"","title":"__root__"},{"location":"schemas-reference/#pstock.schemas.earnings.Earnings.df","text":"Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame","title":"df"},{"location":"schemas-reference/#pstock.schemas.trend","text":"","title":"trend"},{"location":"schemas-reference/#pstock.schemas.trend.Trend","text":"","title":"Trend"},{"location":"schemas-reference/#pstock.schemas.trend.Trend.date","text":"","title":"date"},{"location":"schemas-reference/#pstock.schemas.trend.Trend.strong_buy","text":"","title":"strong_buy"},{"location":"schemas-reference/#pstock.schemas.trend.Trend.buy","text":"","title":"buy"},{"location":"schemas-reference/#pstock.schemas.trend.Trend.hold","text":"","title":"hold"},{"location":"schemas-reference/#pstock.schemas.trend.Trend.sell","text":"","title":"sell"},{"location":"schemas-reference/#pstock.schemas.trend.Trend.strong_sell","text":"","title":"strong_sell"},{"location":"schemas-reference/#pstock.schemas.trend.Trend.score","text":"","title":"score"},{"location":"schemas-reference/#pstock.schemas.trend.Trend.recomendation","text":"","title":"recomendation"},{"location":"schemas-reference/#pstock.schemas.trend.Trends","text":"","title":"Trends"},{"location":"schemas-reference/#pstock.schemas.trend.Trends.__root__","text":"","title":"__root__"},{"location":"schemas-reference/#pstock.schemas.trend.Trends.df","text":"Convert root field into a pandas.DataFrame. The DataFrame is cached in a private attribute ._df that is used in subsequent calls. Returns: Type Description pd.DataFrame","title":"df"},{"location":"yahoo-finance-reference/","text":"Yahoo-finance pstock.yahoo_finance special pstock.yahoo_finance.asset get_asset ( symbol , client = None ) async Get Asset data from yahoo-finance. An Asset will at least have it's: symbol, name and type. Parameters: Name Type Description Default symbol str A stock/crypto symbol availlable in yahoo-finance required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description Asset pstock.schemas.Asset pstock.yahoo_finance.bar UnprocessableEntity ( Exception ) Exception for when yahoo-finance returns a status 422. It usually means that the interval provided is not valid for provided range or start time. get_bars ( symbol , interval = 'auto' , period = None , start = None , end = None , include_prepost = False , events = 'div,splits' , client = None ) async Get symbol Bars from yahoo-finance. Each bar contains: datetime (UTC), open, hight, low, close, adj_close and interval The generated Bars can be viewed as a pd.DataFrame, using the property .df . Either the period or start time should at least be provided. If the provided interval is not valid relative to period or start time, an UnprocessableEntity error will be raised (as a response from yahoo-finance). You can also provide an interval=\"auto\" (default), so that pstock can automatically infer from your provided period or start value the minimum interval usable. When interval is set to auto , we try a list of valid intervals from lowest supported to largest. Examples: >>> from pstock.yahoo_finance import get_bars >>> >>> bars = await get_bars ( \"MSFT\" , interval = \"1h\" , period = \"1d\" ) >>> print ( bars ) # will print a pydantic model >>> print ( bars . df . head ()) # will print a pd.DataFrame Parameters: Name Type Description Default symbol str ticker for a stock/crypto/ETF availlable in yahoo-finance. required interval tp.Literal[\"auto\", \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"1h\", \"1d\", \"5d\", \"1mo\", \"3mo\"] Interval to use when getting Bars . 'auto' period tp.Optional[tp.Literal[\"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\"]] Range/Period to use for getting market data. Period is relative to datetime.now() and open market days. Either Use period parameter or use start and end . None start tp.Union[None, str, int, float, datetime] Download start date, ideally an UTC datetime object, but also accepts int/float timestamps or str datetime supported by pydantic None end tp.Union[None, str, int, float, datetime] Download end date, ideally an UTC datetime object, but also accepts int/float timestamps or str datetime supported by pydantic . If not provided and start is provided, defaults to datetime.utcnow() None include_prepost bool Include Pre and Post market data in Bars . False events tp.Literal[\"div\", \"split\", \"div,splits\"] events to include with response.. 'div,splits' client tp.Optional[httpx.AsyncClient] Optional instance of httpx.AsyncClient . None Exceptions: Type Description anyio.ExceptionGroup group of UnprocessableEntity errors. Returns: Type Description Bars pstock.schemas.Bars get_bars_multi ( symbols , interval = 'auto' , period = None , start = None , end = None , include_prepost = False , events = 'div,splits' , client = None ) async Get Bars for multiple symbols from yahoo-finance. Works exactly the same as get_bars , but with a list of symbols as input. This function returns an instance of BarsMulti , wich is simply a mapping str -> Bars . Accessings bars for each symbol can be done the same as a Mapping/Dict. Examples: >>> from pstock.yahoo_finance import get_bars_multi >>> >>> bars = await get_bars_multi ([ \"MSFT\" , \"TSLA\" , \"AAPL\" ], period = \"1d\" ) >>> print ( bars ) # will print all bars of all symbols as a pydantic model. >>> print ( bars [ \"MSFT\" ]) # will print bars specific to symbol `MSFT` >>> print ( bars . df . head ()) # will print a pd.DataFrame of all symbols >>> print ( bars [ \"MSFT\" ] . df ) # will print only pd.DataFrame for `MSFT` bars. Parameters: Name Type Description Default symbols tp.List[str] List fo symbols availlable in yahoo-finance (it is possible to mix stock and crypto symbols, but not ideal) required interval tp.Literal[\"auto\", \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"1h\", \"1d\", \"5d\", \"1mo\", \"3mo\"] Interval to use when getting Bars . 'auto' period tp.Optional[tp.Literal[\"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\"]] Range/Period to use for getting market data. Period is relative to datetime.now() and open market days. Either Use period parameter or use start and end . None start tp.Union[None, str, int, float, datetime] Download start date, ideally an UTC datetime object, but also accepts int/float timestamps or str datetime supported by pydantic None end tp.Union[None, str, int, float, datetime] Download end date, ideally an UTC datetime object, but also accepts int/float timestamps or str datetime supported by pydantic . If not provided and start is provided, defaults to datetime.utcnow() None include_prepost bool Include Pre and Post market data in Bars . False events tp.Literal[\"div\", \"split\", \"div,splits\"] events to include with response.. 'div,splits' client tp.Optional[httpx.AsyncClient] Optional instance of httpx.AsyncClient . None Returns: Type Description BarsMulti pstock.schemas.BarsMulti pstock.yahoo_finance.earnings get_earnings ( symbol , client = None ) async Get Earnings data from yahoo-finance. Earnings are parsed from the quote_summary generated by get_quote_summary . Is provided symbol has no earnings (crypto/ETF) and empty Earnings is returned. Parameters: Name Type Description Default symbol str A stock symbol availlable in yahoo-finance required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description Earnings pstock.schemas.Earnings pstock.yahoo_finance.quote get_quote_summary ( symbol , client = None ) async Get symbol quote summary from yahoo-finance. Returns a dictionnary with alla data that we can possibly get fromt yahoo-finance about a symbol. The schemas of dictionnary differs based on wether the symbol is a stock, ETF or crypto. The result of this function is used to parse Assets and Earnings , among others ... Parameters: Name Type Description Default symbol str Symbol or ticker in yahoo-finance, ex: TSLA, ETH-USD, ^QQQ, ... required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description Dict[str, Any] Parsed quote dict. pstock.yahoo_finance.trend get_trends ( symbol , client = None ) async Get Trends data from yahoo-finance. Trends are parsed from the quote_summary generated by get_quote_summary . Is provided symbol has no Trends (crypto/ETF): an empty Trends object is returned. Parameters: Name Type Description Default symbol str A stock symbol availlable in yahoo-finance required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description Trends pstock.schemas.Trends pstock.yahoo_finance.utils","title":"Yahoo-finance"},{"location":"yahoo-finance-reference/#yahoo-finance","text":"","title":"Yahoo-finance"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance","text":"","title":"yahoo_finance"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.asset","text":"","title":"asset"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.asset.get_asset","text":"Get Asset data from yahoo-finance. An Asset will at least have it's: symbol, name and type. Parameters: Name Type Description Default symbol str A stock/crypto symbol availlable in yahoo-finance required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description Asset pstock.schemas.Asset","title":"get_asset()"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.bar","text":"","title":"bar"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.bar.UnprocessableEntity","text":"Exception for when yahoo-finance returns a status 422. It usually means that the interval provided is not valid for provided range or start time.","title":"UnprocessableEntity"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.bar.get_bars","text":"Get symbol Bars from yahoo-finance. Each bar contains: datetime (UTC), open, hight, low, close, adj_close and interval The generated Bars can be viewed as a pd.DataFrame, using the property .df . Either the period or start time should at least be provided. If the provided interval is not valid relative to period or start time, an UnprocessableEntity error will be raised (as a response from yahoo-finance). You can also provide an interval=\"auto\" (default), so that pstock can automatically infer from your provided period or start value the minimum interval usable. When interval is set to auto , we try a list of valid intervals from lowest supported to largest. Examples: >>> from pstock.yahoo_finance import get_bars >>> >>> bars = await get_bars ( \"MSFT\" , interval = \"1h\" , period = \"1d\" ) >>> print ( bars ) # will print a pydantic model >>> print ( bars . df . head ()) # will print a pd.DataFrame Parameters: Name Type Description Default symbol str ticker for a stock/crypto/ETF availlable in yahoo-finance. required interval tp.Literal[\"auto\", \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"1h\", \"1d\", \"5d\", \"1mo\", \"3mo\"] Interval to use when getting Bars . 'auto' period tp.Optional[tp.Literal[\"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\"]] Range/Period to use for getting market data. Period is relative to datetime.now() and open market days. Either Use period parameter or use start and end . None start tp.Union[None, str, int, float, datetime] Download start date, ideally an UTC datetime object, but also accepts int/float timestamps or str datetime supported by pydantic None end tp.Union[None, str, int, float, datetime] Download end date, ideally an UTC datetime object, but also accepts int/float timestamps or str datetime supported by pydantic . If not provided and start is provided, defaults to datetime.utcnow() None include_prepost bool Include Pre and Post market data in Bars . False events tp.Literal[\"div\", \"split\", \"div,splits\"] events to include with response.. 'div,splits' client tp.Optional[httpx.AsyncClient] Optional instance of httpx.AsyncClient . None Exceptions: Type Description anyio.ExceptionGroup group of UnprocessableEntity errors. Returns: Type Description Bars pstock.schemas.Bars","title":"get_bars()"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.bar.get_bars_multi","text":"Get Bars for multiple symbols from yahoo-finance. Works exactly the same as get_bars , but with a list of symbols as input. This function returns an instance of BarsMulti , wich is simply a mapping str -> Bars . Accessings bars for each symbol can be done the same as a Mapping/Dict. Examples: >>> from pstock.yahoo_finance import get_bars_multi >>> >>> bars = await get_bars_multi ([ \"MSFT\" , \"TSLA\" , \"AAPL\" ], period = \"1d\" ) >>> print ( bars ) # will print all bars of all symbols as a pydantic model. >>> print ( bars [ \"MSFT\" ]) # will print bars specific to symbol `MSFT` >>> print ( bars . df . head ()) # will print a pd.DataFrame of all symbols >>> print ( bars [ \"MSFT\" ] . df ) # will print only pd.DataFrame for `MSFT` bars. Parameters: Name Type Description Default symbols tp.List[str] List fo symbols availlable in yahoo-finance (it is possible to mix stock and crypto symbols, but not ideal) required interval tp.Literal[\"auto\", \"1m\", \"2m\", \"5m\", \"15m\", \"30m\", \"1h\", \"1d\", \"5d\", \"1mo\", \"3mo\"] Interval to use when getting Bars . 'auto' period tp.Optional[tp.Literal[\"1d\", \"5d\", \"1mo\", \"3mo\", \"6mo\", \"1y\", \"2y\", \"5y\", \"10y\", \"ytd\", \"max\"]] Range/Period to use for getting market data. Period is relative to datetime.now() and open market days. Either Use period parameter or use start and end . None start tp.Union[None, str, int, float, datetime] Download start date, ideally an UTC datetime object, but also accepts int/float timestamps or str datetime supported by pydantic None end tp.Union[None, str, int, float, datetime] Download end date, ideally an UTC datetime object, but also accepts int/float timestamps or str datetime supported by pydantic . If not provided and start is provided, defaults to datetime.utcnow() None include_prepost bool Include Pre and Post market data in Bars . False events tp.Literal[\"div\", \"split\", \"div,splits\"] events to include with response.. 'div,splits' client tp.Optional[httpx.AsyncClient] Optional instance of httpx.AsyncClient . None Returns: Type Description BarsMulti pstock.schemas.BarsMulti","title":"get_bars_multi()"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.earnings","text":"","title":"earnings"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.earnings.get_earnings","text":"Get Earnings data from yahoo-finance. Earnings are parsed from the quote_summary generated by get_quote_summary . Is provided symbol has no earnings (crypto/ETF) and empty Earnings is returned. Parameters: Name Type Description Default symbol str A stock symbol availlable in yahoo-finance required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description Earnings pstock.schemas.Earnings","title":"get_earnings()"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.quote","text":"","title":"quote"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.quote.get_quote_summary","text":"Get symbol quote summary from yahoo-finance. Returns a dictionnary with alla data that we can possibly get fromt yahoo-finance about a symbol. The schemas of dictionnary differs based on wether the symbol is a stock, ETF or crypto. The result of this function is used to parse Assets and Earnings , among others ... Parameters: Name Type Description Default symbol str Symbol or ticker in yahoo-finance, ex: TSLA, ETH-USD, ^QQQ, ... required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description Dict[str, Any] Parsed quote dict.","title":"get_quote_summary()"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.trend","text":"","title":"trend"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.trend.get_trends","text":"Get Trends data from yahoo-finance. Trends are parsed from the quote_summary generated by get_quote_summary . Is provided symbol has no Trends (crypto/ETF): an empty Trends object is returned. Parameters: Name Type Description Default symbol str A stock symbol availlable in yahoo-finance required client tp.Optional[httpx.AsyncClient] Defaults to None. None Returns: Type Description Trends pstock.schemas.Trends","title":"get_trends()"},{"location":"yahoo-finance-reference/#pstock.yahoo_finance.utils","text":"","title":"utils"}]}